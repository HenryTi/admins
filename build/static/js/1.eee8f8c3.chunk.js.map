{"version":3,"sources":["tonva-tools/entry/userApi.ts","tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["entry_userApi","net","[object Object]","params","ret","this","get","Object","tonva_tools_user","token","user","nick","icon","post","account","type","verify","password","undefined","loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","caption","regex","getSender","un","find","v","test","__decorate","mobx_module","widgets","buttonDisabled","onClick","onButtonClick","context","form","props","name","evt","target","value","trim","length","ref","input","inputType","defaultValue","onChange","placeholder","readOnly","disabled","onKeyDown","onFocus","onBlur","maxLength","itemSchema","renderErrors","register_RegisterController","ui","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","register_VerifyPage","register_PasswordPage","register_RegSuccess","login","pwd","guest","then","retUser","register_awaiter","logined","alert","registerReturn","msg","isExists","error","accountError","setVerify","toVerify","country","mobile","email","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","required","res","page","header","controller","style","marginLeft","marginRight","uiSchema","onSubmit","requiredFlag","clearContextErrors","getValue","sender","setError","checkAccount","items","widget","label","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","checkVerify","toPassword","typeText","extra","values","data","rePwd","execute","setValue","login_Login","username","login_awaiter","console","log","callback","clickReg","start","clickForget","top","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.eee8f8c3.chunk.js","sourcesContent":["import {CenterApi} from '../net';\r\nimport {User, decodeUserToken} from '../user';\r\n//import { nav } from '../ui';\r\n\r\nexport class UserApi extends CenterApi {\r\n    async login(params: {user: string, pwd: string, guest: number}): Promise<any> {\r\n        //(params as any).device = nav.local.device.get();\r\n        let ret = await this.get('login', params);\r\n        switch (typeof ret) {\r\n            default: return;\r\n            case 'string': return decodeUserToken(ret);\r\n            case 'object':\r\n                let token = ret.token;\r\n                let user = decodeUserToken(token);\r\n                let {nick, icon} = ret;\r\n                if (nick) user.nick = nick;\r\n                if (icon) user.icon = icon;\r\n                return user;\r\n        }\r\n        // !== undefined) return decodeToken(token);\r\n    }\r\n    async register(params: {\r\n        nick:string, \r\n        user:string, \r\n        pwd:string,\r\n        country:number, \r\n        mobile:number, \r\n        email:string,\r\n        verify:string,\r\n    }): Promise<any>\r\n    {\r\n        return await this.post('register', params);\r\n    }\r\n\r\n    async setVerify(account:string, type:'mobile'|'email') {\r\n        return await this.post('set-verify', {account:account, type:type});\r\n    }\r\n\r\n    async checkVerify(account:string, verify:string) {\r\n        return await this.post('check-verify', {account:account, verify:verify});\r\n    }\r\n\r\n    async isExists(account:string) {\r\n        return await this.get('is-exists', {account:account});\r\n    }\r\n\r\n    async resetPassword(account:string, password:string, verify:string, type:'mobile'|'email') {\r\n        return await this.post('reset-password', {account:account, password, verify, type});\r\n    }\r\n}\r\n\r\nconst userApi = new UserApi('tv/user/', undefined);\r\n\r\nexport default userApi;\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n        <span className=\"text-danger\">花</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: /^[0-9]*$/},\r\n    {type:'email', caption:'邮箱', regex: /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'verify', type: 'string', required: true, maxLength: 6} as StringSchema,\r\n        //{name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n            \r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\nexport default class Register extends React.Component {\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='账号注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n*/","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\n//import Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from 'tonva-tools/user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top:any;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = <>登录账号</>;\r\n        }\r\n        else {\r\n            top = tonvaTop;\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {top}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => this.clickForget()}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}