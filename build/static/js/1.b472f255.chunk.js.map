{"version":3,"sources":["tonva/img/logo.svg","tonva/entry/res/login.ts","tonva/entry/res/register.ts","tonva/entry/tools.tsx","tonva/entry/register.tsx","tonva/entry/login.tsx"],"names":["module","exports","__webpack_require__","p","loginRes","_","a","registerRes","logo","tonvaTop","components","loginTop","react","className","src","alt","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","[object Object]","this","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","account","__awaiter","retUser","net","user","pwd","password","guest","undefined","logined","alert","openVPage","register_AccountPage","register_VerifyPage","register_PasswordPage","accounts","register_RegSuccess","registerReturn","msg","ret","isExists","error","accountError","sendVerify","oem","toVerify","params","nick","country","mobile","mobileCountry","email","verify","Number","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","execute","push","setValue","users","onClick","map","login_Login","username","login_awaiter","console","log","token","props","callback","clickReg","start","clickForget","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.b472f255.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { Res } from '../../components';\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from '../../components';\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { nav, mobileRegex, emailRegex } from '../components';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport function tonvaTop() {\r\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\r\n        <img className=\"App-logo h-3c position-absolute\" src={logo} alt=\"img\" />\r\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n            <span className=\"text-danger\">花</span>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, \r\n    VPage, NumSchema} from '../components';\r\nimport { userApi, RegisterParameter } from '../net';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '注册账号';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess(accounts?:any[]) {\r\n        this.openVPage(RegSuccess, accounts);\r\n    }\r\n\r\n    login = async (account?:string) => {\r\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n        await nav.logined(retUser);\r\n    }\r\n\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: \r\n                return '服务器发生错误';\r\n            case 4:\r\n                return '验证码错误';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute():Promise<any> {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess(ret);\r\n        return undefined;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop()}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n            this.controller.password = pwd;\r\n            error = await this.controller.execute();\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open(users: any[]) {\r\n        this.openPage(this.page, {users:users});\r\n    }\r\n\r\n    private page = ({users}) => {\r\n        const {account, successText, login} = this.controller;\r\n        if (users === undefined) {\r\n            return <Page header={false}>\r\n                <div className=\"container w-max-30c\">\r\n                    <div className=\"my-5\">\r\n                        <div className=\"py-5\">\r\n                            账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                        </div>\r\n                        <button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\r\n                            直接登录\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </Page>;\r\n        }\r\n        else {\r\n            return <Page header={false}>\r\n                <div className=\"container w-max-30c\">\r\n                    <div className=\"my-5\">\r\n                        <div className=\"py-5 text-success\">{successText}</div>\r\n                        {users.map((v:any) => {\r\n                            let {name} = v;\r\n                            return <div className=\"py-2 cursor-pointer\" onClick={()=>login(name)}>\r\n                                登录账号 <strong className=\"text-primary\">{name} </strong>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Page>;\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../components';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport { userApi } from '../net';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../tool/user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    //top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {tonvaTop()}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}