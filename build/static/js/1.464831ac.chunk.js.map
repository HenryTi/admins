{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","__decorate","mobx_module","widgets","[object Object]","this","buttonDisabled","onClick","onButtonClick","context","form","props","undefined","name","evt","target","value","trim","length","ref","input","inputType","defaultValue","onChange","placeholder","readOnly","disabled","onKeyDown","onFocus","onBlur","maxLength","itemSchema","renderErrors","register_RegisterController","ui","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","account","register_VerifyPage","register_PasswordPage","register_RegSuccess","userApi","login","user","pwd","password","guest","then","retUser","__awaiter","logined","alert","registerReturn","msg","ret","isExists","error","accountError","setVerify","toVerify","params","nick","country","mobile","email","verify","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","required","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onSubmit","requiredFlag","clearContextErrors","getValue","sender","setError","checkAccount","items","widget","label","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","checkVerify","toPassword","typeText","extra","values","data","rePwd","execute","setValue","login_Login","username","login_awaiter","console","log","token","callback","clickReg","start","clickForget","top","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.464831ac.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n        <span className=\"text-danger\">花</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: /^[0-9]*$/},\r\n    {type:'email', caption:'邮箱', regex: /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'verify', type: 'string', required: true, maxLength: 6} as StringSchema,\r\n        //{name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n            \r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\nexport default class Register extends React.Component {\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='账号注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n*/","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\n//import Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top:any;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = <>登录账号</>;\r\n        }\r\n        else {\r\n            top = tonvaTop;\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {top}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => this.clickForget()}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}