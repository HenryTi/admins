{"version":3,"sources":["tonva/entry/res/login.ts","tonva/entry/res/register.ts","tonva/entry/tools.tsx","tonva/entry/register.tsx","tonva/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","ui","loginTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","[object Object]","this","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","openVPage","register_AccountPage","account","register_VerifyPage","register_PasswordPage","register_RegSuccess","userApi","login","user","pwd","password","guest","then","retUser","__awaiter","undefined","logined","alert","registerReturn","msg","ret","isExists","error","accountError","setVerify","toVerify","params","nick","country","mobile","mobileCountry","email","verify","Number","register","clear","toSuccess","regReturn","register_ForgetController","resetPassword","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","execute","setValue","onClick","login_Login","username","login_awaiter","console","log","token","props","callback","clickReg","start","clickForget","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.50b27d9a.chunk.js","sourcesContent":["import { Res } from '../../ui';\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from '../../ui';\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { nav, mobileRegex, emailRegex } from '../ui';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport function tonvaTop() {\r\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\r\n        <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n            <span className=\"text-danger\">花</span>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\nimport { userApi, RegisterParameter } from './userApi';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop()}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText, login} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" type=\"button\" onClick={login}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport { userApi } from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    //top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {tonvaTop()}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}